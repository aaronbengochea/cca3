AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to IMPORT existing API Gateway stack

Parameters:
  UploadBucketName:
    Type: String
    Default: cs-gy-9223-smart-photo-album-storage
  LF1FunctionName:
    Type: String
    Default: LF1-index-photos
  LF2FunctionName:
    Type: String
    Default: LF2-search-photos
  StageName:
    Type: String
    Default: prod
  ApiName:
    Type: String
    Default: smart-photo-album-api
  ApiKeyName:
    Type: String
    Default: smart-photo-album-api-key
  UsagePlanName:
    Type: String
    Default: smart-photo-album-usage-plan
  S3ProxyRoleName:
    Type: String
    Default: smart-photo-album-apigateway-s3-proxy-role

Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Retain
    Properties:
      Name: !Ref ApiName
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - application/octet-stream

  SearchResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: search

  GetSearchMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LF2FunctionName}/invocations
      MethodResponses:
        - StatusCode: 200

  OptionsSearchMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SearchResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  UploadResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: upload

  PutUploadMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref UploadResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.querystring.object: true
        method.request.header.x-amz-meta-customLabels: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Credentials: !GetAtt S3ProxyExecutionRole.Arn
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/${UploadBucketName}/{object}
        RequestParameters:
          integration.request.path.object: method.request.querystring.object
          integration.request.header.x-amz-meta-customLabels: method.request.header.x-amz-meta-customLabels
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  OptionsUploadMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Retain
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref UploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-meta-customLabels'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DeletionPolicy: Retain
    DependsOn:
      - GetSearchMethod
      - OptionsSearchMethod
      - PutUploadMethod
      - OptionsUploadMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref StageName

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DeletionPolicy: Retain
    Properties:
      Name: !Ref ApiKeyName
      Enabled: true

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DeletionPolicy: Retain
    DependsOn: ApiGatewayDeployment
    Properties:
      UsagePlanName: !Ref UsagePlanName
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref StageName
      Throttle:
        RateLimit: 1
        BurstLimit: 1
      Quota:
        Limit: 1000
        Period: MONTH

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DeletionPolicy: Retain
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  LF2Permission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref LF2FunctionName
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${StageName}/GET/search

  S3ProxyExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      RoleName: !Ref S3ProxyRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
